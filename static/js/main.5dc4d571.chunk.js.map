{"version":3,"sources":["ChartPage.js","HorizontalChart.js","Donut.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["ChartPage","options","series","className","type","HorizontalChart","horizontalSeries","horizontalOptions","id","style","height","Donut","donutSeries","donutOptions","display","justifyContent","Map","mapData","backgroundColor","textColor","multiline","viewBox","map","m","key","d","data-tip","url","App","useState","setSeries","setOptions","setHorizontalSeries","setHorizontalOptions","setDonutSeries","setDonutOptions","setMapData","useEffect","a","fetch","response","ok","json","result","newHorizontalChartSeries","Object","values","horizontalChart","newHorizontalChartData","dataHorizontal","s","newHorizontalOptions","newSeries","chart","newOptions","newDonutChartDataSeries","donutChart","dataDonut","newDonutOptions","newMapData","svg","mapArray","console","log","status","fetchData","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5dc4d571.chunk.js","sourcesContent":["import React from \"react\";\nimport Chart from \"react-apexcharts\";\n\nexport const ChartPage = ({ options, series }) => {\n  return (\n    <div className=\"mixed-chart\">\n      <Chart\n        options={options}\n        series={series}\n        type=\"bar\"\n      />\n    </div>\n  );\n}","import React from \"react\";\nimport Chart from \"react-apexcharts\";\n\nexport const HorizontalChart = ({ horizontalSeries, horizontalOptions }) => {\n  return (\n    <div id=\"chart\" style={{ height: \"100%\" }}>\n      <Chart\n        options={horizontalOptions}\n        series={horizontalSeries}\n        type=\"bar\"\n      />\n    </div>\n  )\n}","import React from \"react\";\nimport Chart from \"react-apexcharts\";\n\nexport const Donut = ({ donutSeries, donutOptions }) => {\n  return (\n    <div style={{ display: \"flex\", justifyContent: \"center\" }}>\n      <Chart\n        options={donutOptions}\n        series={donutSeries}\n        type=\"donut\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactTooltip from \"react-tooltip\";\n\nexport const Map = ({ mapData }) => {\n\n  return (\n    <div className=\"enrichment__spain\">\n      <ReactTooltip\n        backgroundColor={\"white\"}\n        textColor={\"#0000004d\"}\n        multiline={true}\n      />\n      <svg viewBox=\"0 0 420 470\">\n        {mapData.map((m) => {\n          return (\n            <path key={m[2]} d={m[0]} data-tip={m[1]} />\n          )\n        })}\n      </svg>\n    </div>\n  );\n};","import React, { useEffect, useState } from 'react'\nimport { ChartPage } from './ChartPage'\nimport { HorizontalChart } from './HorizontalChart'\nimport { Donut } from './Donut'\nimport { Map } from './Map'\n\nconst url = 'http://localhost:3000/db.json';\n\nconst App = () => {\n  const [series, setSeries] = useState([])\n  const [options, setOptions] = useState({})\n  const [horizontalSeries, setHorizontalSeries] = useState([])\n  const [horizontalOptions, setHorizontalOptions] = useState({})\n  //Donut\n  const [donutSeries, setDonutSeries] = useState([])\n  const [donutOptions, setDonutOptions] = useState({})\n  //Map\n  const [mapData, setMapData] = useState([])\n\n  useEffect(() => {\n    async function fetchData() {\n      const response = await fetch(url);\n      if (response.ok) {\n        let result = await response.json();\n        //Horizontal\n        const newHorizontalChartSeries = Object.values(result.horizontalChart)[0]\n        const newHorizontalChartData = Object.values(newHorizontalChartSeries)\n        const dataHorizontal = newHorizontalChartData.map(s => s)\n        //options\n        const newHorizontalOptions = Object.values(result.horizontalChart)[1]\n\n        //Chart Page\n        const newSeries = Object.values(result.chart)[1]\n        const newOptions = Object.values(result.chart)[0]\n\n        //Donut\n        const newDonutChartDataSeries = Object.values(result.donutChart)[0]\n        const dataDonut = newDonutChartDataSeries.map(s => s)\n        const newDonutOptions = Object.values(result.donutChart)[1]\n\n        //Map\n        const newMapData = Object.values(result.mapData.svg)\n        const mapArray = newMapData.map(m => {\n          const data = Object.values(m)\n          return data\n        })\n\n\n        setDonutSeries(dataDonut)\n        setDonutOptions(newDonutOptions)\n        setSeries(newSeries)\n        setOptions(newOptions)\n        setHorizontalSeries(dataHorizontal)\n        setHorizontalOptions(newHorizontalOptions)\n        setMapData(mapArray)\n      } else {\n        console.log(\"Ошибка HTTP: \" + response.status);\n      }\n    }\n    fetchData();\n  }, [])\n\n  return (\n    <div className='wrap'>\n      <div className='card'>\n        <ChartPage series={series} options={options} />\n      </div>\n      <div className='card'>\n        <HorizontalChart\n          horizontalSeries={horizontalSeries}\n          horizontalOptions={horizontalOptions}\n        />\n      </div>\n      <div className='card'>\n        <Donut donutSeries={donutSeries} donutOptions={donutOptions} />\n      </div>\n      <div className='card'>\n        <Map mapData={mapData} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}